Composant DocumentPost
------------------------------------

Props

libelle			string			''

Première ligne du composant, pes de ligne si ''. Exemple: Indexation d'un document de la famille photo


titre				string			''

Contenu initial du champ Titre


famillestypes		array			voir sous note1 la valeur par défaut

Liste des familles et des types par famille disponible dans les liste de choix Famille et Type


familletitre		string			'apres'

Défini si le libelle de la famille se met (modification automatique du champ Titre) dans le titre lors du choix de la famille
'apres' : à la fin du titre
'avant' : au début du titre
'' ou n'importe quoi d'autre, pas de reprise du libelle de la famille


nomfichiertitre		string			'non'

Si à 'oui', lors de la selection du fichier à indexer, le nom du fichier, sans l'extension, est saisi automatiquement dans le champ titre


sujet			string			''

Contenu initial du champ Sujet


auteuremploye	string			''	note2

identifiant (numerique) de l'employe auteur du document


auteuracteur		array			[]	note2

identifiant (numérique) du (des) acteur(s) auteur du document


objetslies			array			[]	

identifiant (numérique) du (des) objet(s) lié(s) au document. Initialise la liste des objets liés qui peut être modifiée avec l'interface


idniveauconfidentialite	string		'1'	note3

niveau de confidentialité


sizemax			number			10000000 
Taille (en octets) maximum du fichier que l'interface acceptera de traiter (défaut 10 Mo)
Pas plus de 200 Mo sinon il y a blocage au niveau du serveur ( php: upload_max_filesize 222 M)


suitesauve		string			init
Comportement du composant suite à la sauvegarde
init : réinitialise tous les champs ave les valeurs par défaut
keep : garde les valeurs saisies sauf le champ qui défini le fichier à indexer.


Event

postDocument 	string json
{
	success: true / false,
	message: ........,
	fileName: fileNameClient -> fileNameUnique (php upload) -> nomFichier (goeland repository),
	titre: titre du document,
	iddocument: nnnnnn,
	taille: xxxxxx (en octet),
	md5: chaine MD5 de 32 caractères,
}


Exemples simples d'utilisation :

//Avec valeurs par défaut:
<template>
  <v-app>
    <v-main>
      <p>Test documentpost</p>
      <Suspense>
        <DocumentPost></DocumentPost>
      </Suspense>
     </v-main>
  </v-app>
</template>

<script setup>
import DocumentPost from '../../document_post24/src/components/DocumentPost.vue'
</script>


//Avec quelques paramètres du composant
<template>
  <v-app>
    <v-main>
      <p>Test documentpost</p>
      <Suspense>
        <DocumentPost
          libelle="Indexation d'un PV de séance"
          titre="PV du"
          :famillestypes="[
            {
              id: 18,
              label: 'Procès verbal, notes de séance',
              value: '18',
              type: [
                {
                  id: 15,
                  label: 'pdf',
                  value: '15',
                },
                {
                  id: 21,
                  label: 'docx',
                  value: '21',
                },
                {
                  id: 27,
                  label: 'odt',
                  value: '27',
                },
                {
                  id: 18,
                  label: 'txt',
                  value: '18',
                },
              ],
            }            
          ]"
          idniveauconfidentialite="3"
          @postDocument="receptionDocumentPost"
        ></DocumentPost>
      </Suspense>
    </v-main>
  </v-app>
</template>

<script setup>
import DocumentPost from '../../document_post24/src/components/DocumentPost.vue'
const receptionDocumentPost = (responseData) => {
  console.log(`receptionDocumentPost suite emit ${JSON.stringify(responseData)}`)
}
</script>

ça à l'air cool...
Mais déception, ça ne l'est pas pour le moment (09.10.2024) car de la façon dont j'ai utilisé pinia, et ainsi que le petit utilitaire permettant de choisir le contexte vuetify (stocké dans pinia) impose un vuetify.js et un main.js particulier.
Du coup, ce composant peut-il encore être considéré comme un composant.
Je détaille le problème plus loin et il faudra voir pour modifier ça...


Ce composant, même sans ses défauts actuel expliqué ci-dessus, il ne me suffit pas.
C'est pas du tout pratique de devoir faire une page pour chaque configuration différente, de modifier le code et compiler si il faut modifier les familles disponibles.
Il faut aussi pouvoir gérer des paramètres dynamiques (par exemple, si au moment de l'indexation du document, on veut reprendre des objets liés venant du contexte d'utilisation)
J'ai pensé que cette gestions de paramètres ne devait pas se trouver dans le composant DocumentPost.
Il y a donc un composant qui appelle DocumentPost en lui passant dynamiquement des paramètres

Composant DPDataInitialLoad (DP comme DocumentPost)
-----------------------------------------

Props

codeConfigIni		string			''

permet de charger un fichier json de configuration se trouvant sur le serveur (backend) qui défini des proriétes à passer à DocumentPost
.......explications.......

jsonConfigIni		string			''

chaine JSON qui défini des proriétes à passer à DocumentPost
Si une propriété est définie dans le fichier de configuration (défini par codeConfigIni) et dans jsonConfigIni, c'est jsonConfigIni qui est pris en compte

suitesauve		string			'pagedata'

Défini les actions après le POST du document.
Au niveau du composant DocumentPost, définira suitesauve à 'init' ou 'keep'
Défini les comportement suivant:
 - Ouverture de la page document_data
 - Ouverture de la page document_edit
 - Transmission de l'évènement pour le document
 - Transmission de l'évènement pour plusieurs documents (affiche bouton [Indexation terminée] )
Valeurs possibles :
pagedata			passe à DocumentPost suitesauve : 'init', ouvre la fiche de consutation du document après indexation, pas d'évènement émis
pageedit			passe à DocumentPost suitesauve : 'init', ouvre la fiche d'édition du document après indexation, pas d'évènement émis
emitinit			passe à DocumentPost suitesauve : 'init', émet l'évènement postDocument en passant un objet avec succes, documents[{iddocument, titre, taille, md5, message}]
emitkeep			passe à DocumentPost suitesauve : 'keep', émet l'évènement postDocument en passant un objet avec succes, documents[{iddocument, titre, taille, md5, message}]
emitdocsinit		passe à DocumentPost suitesauve : 'init',  affiche un bouton [indexation terminée], au clic sur le bouton, émet l'évènement postDocument en passant un objet avec succes, documents[{iddocument, titre, taille, md5, message}]
emitdocskeep		passe à DocumentPost suitesauve : 'keep', affiche un bouton [indexation terminée], au clic sur le bouton, émet l'évènement postDocument en passant un objet avec succes, documents[{iddocument, titre, taille, md5, message}]


************************************************************************************************
note1: famillestypes par défaut
[
          {
            id: 7,
            label: 'Correspondance',
            value: '7',
            type: [
              {
                  id: 15,
                  label: 'pdf',
                  value: '15',
              },
              {
                  id: 18,
                  label: 'txt',
                  value: '18',
              },
            ],
          },
          {
            id: 5,
            label: 'Photo',
            value: '5',
            type: [
              {
                  id: 15,
                  label: 'pdf',
                  value: '15',
              },
              {
                  id: 5,
                  label: 'jpg',
                  value: '5',
              },
              {
                  id: 20,
                  label: 'png',
                  value: '20',
              },
            ],
          },
          {
            id: 11,
            label: 'Plan',
            value: '11',
            type: [
              {
                  id: 15,
                  label: 'pdf',
                  value: '15',
              },
            ],
          },
          {
            id: 18,
            label: 'Procès verbal, notes de séance',
            value: '18',
            type: [
              {
                id: 15,
                label: 'pdf',
                value: '15',
              },
              {
                id: 21,
                label: 'docx',
                value: '21',
              },
              {
                id: 27,
                label: 'odt',
                value: '27',
              },
              {
                id: 18,
                label: 'txt',
                value: '18',
              },
            ],
          },
        ]

	  
note2: auteuremploye / auteursacteur
Si un document a un auteur employé, c'est un document interne, si il a un (des) auteurs acteur, c'est un document externe
Il ne peut y avoir qu'un seul auteur employé, mais il peut y avoir plusieurs auteurs acteur
Si on passe au composant les 2 propriétés auteuremploye et auteursacteur et que auteuremploye n'est pas égal à '', la propriété auteursacteur sera ignorée

note3: niveau de confidentialité
IdNivConf	NivConf
0	Document public
1	Interne Ville de Lausanne
2	Limité aux employes de la direction				Possibilité de choix employés et unités organisationnelles en plus
3	Limité aux employés du service					Possibilité de choix employés et unités organisationnelles en plus
4	Limité aux employés de l'unité organisationnelle		Possibilité de choix employés et unités organisationnelles en plus
5	Limité au(x) groupe(s) de sécurité autorisé(s)		Choix des groupes de sécurité et possibilité de choix employés et unités organisationnelles en plus
6	Limité aux employés autorisés					Choix employés et unités organisationnelles en plus
